#!/usr/bin/env ruby -n

COLOR_CODE_REGEXP ||= /\e\[\d{0,2}m/

RESET_ALL ||= "\e[0m"
RESET_TEXT ||= "\e[39m"
RESET_BACKGROUND ||= "\e[49m"

GRAY ||= "\e[37m"
WARNING ||= "\e[101m"

input = $_

process ||= false
previous_blank_line ||= nil
previous_spaces_size ||= nil

if input =~ /^#{COLOR_CODE_REGEXP}?(diff --git|@@)/
  process = false
  previous_blank_line = nil
  previous_spaces_size = nil
end

output = if process
  input.gsub! /(?<!^)#{COLOR_CODE_REGEXP}/, ''

  spaces = input.match(/^#{COLOR_CODE_REGEXP}?[ +-]?( *)/).captures.first
  spaces_prefix = "#{GRAY}#{spaces.size == 0 ? '  ' : '%2d' % spaces.size}#{RESET_TEXT}|"

  line_prefix, line_content = input.match(/^(#{COLOR_CODE_REGEXP}?[ +-]? *)(.*\n)$/).captures

  deletion = line_prefix.match(/^#{COLOR_CODE_REGEXP}?([ +-]?)/).captures.first == '-'

  unless deletion
    if previous_blank_line && line_content.chomp.empty?
      line_prefix << "#{WARNING}#{' ' * 140}#{RESET_BACKGROUND}"
    end

    if spaces.size.odd? || !previous_blank_line && previous_spaces_size && spaces.size - previous_spaces_size > 2
      line_prefix.gsub! /([ +-]?)(#{spaces})/, "\\1#{WARNING}\\2#{RESET_BACKGROUND}"
    end

    [
      /( {2,})/,
      /(,[^ \n])/,
      /([({\[] | [\]})])/,
      /( +)$/,
      /^(\\ No newline at end of file)$/
    ].each do |regexp|
      line_content.gsub! regexp, "#{WARNING}\\1#{RESET_BACKGROUND}"
    end

    previous_blank_line = line_content.chomp.empty?
    previous_spaces_size = spaces.size
  end

  "#{spaces_prefix}#{line_prefix}#{line_content}#{RESET_ALL}"
else
  input
end

print output

process = true if input =~ /^#{COLOR_CODE_REGEXP}?@@/
